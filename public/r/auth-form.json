{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-form",
  "type": "registry:block",
  "title": "Auth Form",
  "description": "A simple auth form component that supports logging in, registering, resetting passwords, and two-factor auth.",
  "files": [
    {
      "path": "registry/new-york/auth-form.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n    ArrowLeftIcon,\r\n    AtSign,\r\n    Eye,\r\n    EyeClosed,\r\n    Loader2,\r\n    Lock,\r\n    LucideIcon,\r\n    Mail,\r\n    User,\r\n} from \"lucide-react\";\r\nimport { Link } from \"next-view-transitions\";\r\nimport { AppRouterInstance } from \"next/dist/shared/lib/app-router-context.shared-runtime\";\r\nimport Image from \"next/image\";\r\nimport { redirect, useRouter } from \"next/navigation\";\r\nimport {\r\n    ComponentProps,\r\n    FormEvent,\r\n    ReactElement,\r\n    ReactNode,\r\n    useState,\r\n} from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { UserExistsResponse } from \"~/app/api/auth/user-exists/route\";\r\nimport AnimatedRightChevron from \"~/components/animated-right-chevron\";\r\nimport SimpleTooltip from \"~/components/simple-tooltip\";\r\nimport { Button } from \"~/components/ui/button\";\r\nimport { Input } from \"~/components/ui/input\";\r\nimport { Label } from \"~/components/ui/label\";\r\nimport { Separator } from \"~/components/ui/separator\";\r\nimport { ExtendedBetterAuthOptions } from \"~/lib/auth\";\r\nimport { authClient } from \"~/lib/auth-client\";\r\nimport { env, isProd } from \"~/lib/env\";\r\nimport request from \"~/lib/request\";\r\nimport { cn, isValidEmail } from \"~/lib/utils\";\r\n\r\nexport type AuthFormType = \"auto\" | \"login\" | \"register\";\r\n\r\nexport type AuthFormProps = {\r\n    /**\r\n     * The optional class name to apply to the form.\r\n     */\r\n    className?: string | undefined;\r\n\r\n    /**\r\n     * The BetterAuth options to use.\r\n     */\r\n    authOptions: ExtendedBetterAuthOptions;\r\n\r\n    /**\r\n     * The type of auth form to render.\r\n     * <p>\r\n     * auto - The form will dynamically change based on if the user has an account associated with the email.\r\n     * login - The form will only be for logging in.\r\n     * register - The form will only be for registering.\r\n     * </p>\r\n     */\r\n    type?: AuthFormType;\r\n\r\n    /**\r\n     * The link to the logo to display in the form.\r\n     */\r\n    logo?: string;\r\n\r\n    /**\r\n     * The title of the form.\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * The subtitle of the form.\r\n     */\r\n    subtitle?: string;\r\n\r\n    /**\r\n     * The terms and conditions to display in the form.\r\n     */\r\n    termsAndConditions?: string;\r\n\r\n    /**\r\n     * The privacy policy to display in the form.\r\n     */\r\n    privacyPolicy?: string;\r\n};\r\n\r\nconst AuthForm = ({\r\n    className,\r\n    authOptions,\r\n    type: initialType = \"auto\",\r\n    logo = \"/logo.png\",\r\n    title,\r\n    subtitle = \"Hello there, please login to continue\",\r\n    termsAndConditions,\r\n    privacyPolicy,\r\n}: AuthFormProps): ReactElement => {\r\n    const router: AppRouterInstance = useRouter();\r\n    const [type, setType] = useState<AuthFormType>(initialType);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const [registrationData, setRegistrationData] = useState<\r\n        LoginToRegisterData | undefined\r\n    >(undefined);\r\n\r\n    // Obtain the title from the form type if needed\r\n    if (!title) {\r\n        title =\r\n            (type === \"auto\"\r\n                ? \"Welcome\"\r\n                : type === \"login\"\r\n                ? \"Login\"\r\n                : \"Register\") + ` to ${env.NEXT_PUBLIC_APP_NAME}`;\r\n    }\r\n\r\n    // Render the form\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            {/* Card */}\r\n            <div\r\n                className={cn(\r\n                    \"relative px-9 py-7 min-w-96 flex flex-col gap-5 bg-card border border-muted/65 rounded-lg select-none overflow-y-auto z-10\",\r\n                    className\r\n                )}\r\n            >\r\n                {/* Back Button */}\r\n                <SimpleTooltip content=\"Go Back\" side=\"bottom\">\r\n                    <Button\r\n                        className=\"group absolute top-2.5 left-2.5 text-muted-foreground hover:!bg-transparent\"\r\n                        variant=\"ghost\"\r\n                        size=\"icon\"\r\n                        onClick={() => router.back()}\r\n                    >\r\n                        <ArrowLeftIcon className=\"size-4 group-hover:-translate-x-0.5 transition-transform transform-gpu\" />\r\n                    </Button>\r\n                </SimpleTooltip>\r\n\r\n                <Header logo={logo} title={title} subtitle={subtitle} />\r\n\r\n                {/* OAuth */}\r\n                {authOptions.socialProviders && (\r\n                    <>\r\n                        <OAuthProviders\r\n                            authOptions={authOptions}\r\n                            setError={setError}\r\n                        />\r\n                        {authOptions.emailAndPassword?.enabled && (\r\n                            <div className=\"relative my-1.5\">\r\n                                <Separator />\r\n                                <span className=\"absolute -top-2.5 left-1/2 -translate-x-1/2 bg-card px-5 text-sm text-muted-foreground\">\r\n                                    Or\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n\r\n                {/* Login/Registration Forms */}\r\n                {authOptions.emailAndPassword?.enabled && (\r\n                    <>\r\n                        {type === \"register\" ? (\r\n                            <RegistrationView\r\n                                authOptions={authOptions}\r\n                                prefilledData={registrationData}\r\n                                setError={setError}\r\n                            />\r\n                        ) : (\r\n                            <LoginView\r\n                                authOptions={authOptions}\r\n                                type={type}\r\n                                setType={setType}\r\n                                setError={setError}\r\n                                onSwitchToRegister={setRegistrationData}\r\n                            />\r\n                        )}\r\n                    </>\r\n                )}\r\n\r\n                {error && <p className=\"mx-auto text-destructive\">{error}</p>}\r\n\r\n                {(termsAndConditions || privacyPolicy) && (\r\n                    <LegalFooter\r\n                        termsAndConditions={termsAndConditions}\r\n                        privacyPolicy={privacyPolicy}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            {/* Development Footer */}\r\n            {!isProd && (\r\n                <div\r\n                    className=\"-translate-y-3 p-3.5 pt-5 flex gap-1 justify-center text-sm bg-zinc-900/65 text-muted-foreground border border-muted/65 rounded-lg\"\r\n                    style={{\r\n                        background:\r\n                            \"linear-gradient(to bottom, hsl(240, 6%, 10%), rgba(253, 154, 0, 0.09))\",\r\n                    }}\r\n                >\r\n                    Operating in{\" \"}\r\n                    <span className=\"text-[#DA8702] font-medium\">\r\n                        Development\r\n                    </span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Header = ({\r\n    logo,\r\n    title,\r\n    subtitle,\r\n}: {\r\n    logo: string;\r\n    title: string;\r\n    subtitle: string;\r\n}) => (\r\n    <div className=\"flex flex-col gap-1.5 items-center\">\r\n        <Image\r\n            className=\"py-7\"\r\n            src={logo}\r\n            alt={`${env.NEXT_PUBLIC_APP_NAME} Logo`}\r\n            width={42}\r\n            height={42}\r\n            draggable={false}\r\n            unoptimized\r\n        />\r\n        <h1 className=\"font-bold\">{title}</h1>\r\n        <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\r\n    </div>\r\n);\r\n\r\nconst LegalFooter = ({\r\n    termsAndConditions,\r\n    privacyPolicy,\r\n}: {\r\n    termsAndConditions?: string;\r\n    privacyPolicy?: string;\r\n}) => (\r\n    <footer className=\"flex flex-col gap-1 items-center text-sm text-muted-foreground\">\r\n        <span>By continuing, you agree to our</span>\r\n        <div className=\"flex gap-3.5 items-center\">\r\n            {termsAndConditions && (\r\n                <LegalLink href={termsAndConditions}>\r\n                    Terms of Service\r\n                </LegalLink>\r\n            )}\r\n            {privacyPolicy && (\r\n                <LegalLink href={privacyPolicy}>Privacy Policy</LegalLink>\r\n            )}\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nconst LegalLink = ({\r\n    href,\r\n    children,\r\n}: {\r\n    href: string;\r\n    children: ReactNode;\r\n}) => (\r\n    <Link\r\n        className=\"hover:text-primary transition-colors transform-gpu\"\r\n        href={href}\r\n        target=\"_blank\"\r\n        draggable={false}\r\n    >\r\n        {children}\r\n    </Link>\r\n);\r\n\r\ntype RegistrationViewProps = {\r\n    /**\r\n     * The BetterAuth options to use.\r\n     */\r\n    authOptions: ExtendedBetterAuthOptions;\r\n\r\n    /**\r\n     * The prefilled data to use.\r\n     */\r\n    prefilledData?: LoginToRegisterData;\r\n\r\n    /**\r\n     * The function to call when the error changes.\r\n     */\r\n    setError: (error: string | undefined) => void;\r\n};\r\n\r\nconst RegistrationView = ({\r\n    authOptions,\r\n    prefilledData,\r\n    setError,\r\n}: RegistrationViewProps): ReactElement => {\r\n    const handleRegistration = async (form: FormData) => {\r\n        const name: string | undefined = form.get(\"name\") as string;\r\n        const username: string | undefined =\r\n            (form.get(\"username\") as string) ??\r\n            (!prefilledData?.isEmail ? prefilledData?.input : undefined);\r\n        const email: string | undefined =\r\n            (form.get(\"email\") as string) ??\r\n            (prefilledData?.isEmail ? prefilledData?.input : undefined);\r\n        const password: string | undefined = form.get(\"password\") as string;\r\n        console.log({ name, username, email, password });\r\n\r\n        // Ensure the fields are valid first\r\n        if (!email || !password || !username || !name) {\r\n            setError(\"Missing required fields ):\");\r\n            return;\r\n        }\r\n        if (!isValidEmail(email)) {\r\n            setError(\"Invalid email address\");\r\n            return;\r\n        }\r\n        // Attempt to register the user\r\n        const { data, error } = await authClient.signUp.email({\r\n            email,\r\n            name,\r\n            password,\r\n            username,\r\n        });\r\n        setError(error?.message);\r\n\r\n        // Redirect the user once they register\r\n        if (!error) {\r\n            toast.success(\r\n                `Account created, welcome to ${env.NEXT_PUBLIC_APP_NAME} ${data?.user?.name}!`\r\n            );\r\n            redirect(authOptions.authRedirect ?? \"/app\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GenericFormView submitText=\"Register\" onSubmit={handleRegistration}>\r\n            <FormInputGroup key=\"name-username\">\r\n                <FormInput\r\n                    className=\"w-40\"\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    icon={User}\r\n                    required\r\n                />\r\n                <FormInput\r\n                    className=\"w-40\"\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    icon={AtSign}\r\n                    defaultValue={\r\n                        !prefilledData?.isEmail\r\n                            ? prefilledData?.input\r\n                            : undefined\r\n                    }\r\n                    disabled={!prefilledData?.isEmail && !!prefilledData?.input}\r\n                />\r\n            </FormInputGroup>\r\n            <FormInput\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                icon={Mail}\r\n                required\r\n                defaultValue={\r\n                    prefilledData?.isEmail ? prefilledData?.input : undefined\r\n                }\r\n                disabled={prefilledData?.isEmail && !!prefilledData?.input}\r\n            />\r\n            <PasswordInput key=\"password\" />\r\n        </GenericFormView>\r\n    );\r\n};\r\n\r\ntype LoginToRegisterData = {\r\n    /**\r\n     * The input to use.\r\n     */\r\n    input: string;\r\n\r\n    /**\r\n     * Whether the input is an email.\r\n     */\r\n    isEmail: boolean;\r\n};\r\n\r\ntype LoginViewProps = {\r\n    /**\r\n     * The BetterAuth options to use.\r\n     */\r\n    authOptions: ExtendedBetterAuthOptions;\r\n\r\n    /**\r\n     * The type of auth form to render.\r\n     */\r\n    type: AuthFormType;\r\n\r\n    /**\r\n     * The function to call when the type changes.\r\n     */\r\n    setType: (type: AuthFormType) => void;\r\n\r\n    /**\r\n     * The function to call when the error changes.\r\n     */\r\n    setError: (error: string | undefined) => void;\r\n\r\n    /**\r\n     * The function to call when the user switches to the register view.\r\n     */\r\n    onSwitchToRegister?: (data: LoginToRegisterData) => void;\r\n};\r\n\r\nconst LoginView = ({\r\n    authOptions,\r\n    type,\r\n    setType,\r\n    setError,\r\n    onSwitchToRegister,\r\n}: LoginViewProps): ReactElement => {\r\n    const initialType: AuthFormType = type ?? \"auto\";\r\n    const [promptPassword, setPromptPassword] = useState<boolean>(false);\r\n\r\n    const handleLogin = async (form: FormData) => {\r\n        const usernameOrEmail: string | undefined = form.get(\"email\") as string;\r\n        if (!usernameOrEmail) {\r\n            setError(\"Missing required fields ):\");\r\n            return;\r\n        }\r\n\r\n        // Password has yet to be prompted, check if the user exists based on the input and handle it accordingly\r\n        if (!promptPassword) {\r\n            const doesUserExist: boolean =\r\n                (\r\n                    await request.post<UserExistsResponse>(\r\n                        \"/api/auth/user-exists\",\r\n                        {\r\n                            data: {\r\n                                input: usernameOrEmail,\r\n                            },\r\n                        }\r\n                    )\r\n                )?.exists ?? false;\r\n            if (doesUserExist) {\r\n                setPromptPassword(true);\r\n            } else {\r\n                const isEmailInput = isValidEmail(usernameOrEmail);\r\n                onSwitchToRegister?.({\r\n                    input: usernameOrEmail,\r\n                    isEmail: isEmailInput,\r\n                });\r\n                setType(\"register\");\r\n            }\r\n        } else {\r\n            // Attempt to login with the given credentials\r\n            const password: string | undefined = form.get(\"password\") as string;\r\n            if (!password) {\r\n                setError(\"Missing required fields ):\");\r\n                return;\r\n            }\r\n            const { data, error } = isValidEmail(usernameOrEmail)\r\n                ? await authClient.signIn.email({\r\n                      email: usernameOrEmail,\r\n                      password,\r\n                  })\r\n                : await authClient.signIn.username({\r\n                      username: usernameOrEmail,\r\n                      password,\r\n                  });\r\n            setError(error?.message);\r\n\r\n            // Redirect the user once they login\r\n            if (!error) {\r\n                toast.success(`Logged in, welcome back ${data?.user?.name}!`);\r\n                redirect(authOptions.authRedirect ?? \"/app\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GenericFormView\r\n            submitText={promptPassword ? \"Login\" : \"Continue\"}\r\n            onSubmit={handleLogin}\r\n        >\r\n            {/* Username or Email Address */}\r\n            <div className=\"relative\">\r\n                <FormInput\r\n                    className={cn(\r\n                        promptPassword &&\r\n                            \"opacity-50 cursor-not-allowed bg-muted\"\r\n                    )}\r\n                    label=\"Username or Email Address\"\r\n                    name=\"email\"\r\n                    type=\"text\"\r\n                    icon={Mail}\r\n                    required\r\n                    readOnly={promptPassword}\r\n                />\r\n                {promptPassword && (\r\n                    <Button\r\n                        className=\"absolute right-2 top-2/3 -translate-y-1/2 mt-px h-6 text-xs text-muted-foreground\"\r\n                        type=\"button\"\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => {\r\n                            setType(initialType);\r\n                            setPromptPassword(false);\r\n                        }}\r\n                    >\r\n                        Not You?\r\n                    </Button>\r\n                )}\r\n            </div>\r\n\r\n            {promptPassword && <PasswordInput />}\r\n        </GenericFormView>\r\n    );\r\n};\r\n\r\nconst OAuthProviders = ({\r\n    authOptions,\r\n    setError,\r\n}: {\r\n    authOptions: ExtendedBetterAuthOptions;\r\n    setError: (error: string | undefined) => void;\r\n}): ReactElement => {\r\n    // Render the providers\r\n    const showNames: boolean =\r\n        Object.values(authOptions.socialProviders ?? {}).length < 3;\r\n    return (\r\n        <div className=\"flex flex-wrap gap-1.5 justify-center items-center\">\r\n            {Object.values(authOptions.socialProviders ?? {}).map(\r\n                (provider: any) => (\r\n                    <OAuthProvider\r\n                        key={provider.id}\r\n                        provider={provider}\r\n                        showNames={showNames}\r\n                        authOptions={authOptions}\r\n                        setError={setError}\r\n                    />\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst OAuthProvider = ({\r\n    provider,\r\n    showNames,\r\n    authOptions,\r\n    setError,\r\n}: {\r\n    provider: any;\r\n    showNames: boolean;\r\n    authOptions: ExtendedBetterAuthOptions;\r\n    setError: (error: string | undefined) => void;\r\n}): ReactElement => {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const handleLogin = async () => {\r\n        setLoading(true);\r\n        const { error } = await authClient.signIn.social({\r\n            provider: provider.id,\r\n            callbackURL: authOptions.authRedirect ?? \"/app\",\r\n        });\r\n        setLoading(false);\r\n        setError(error?.message);\r\n    };\r\n\r\n    return (\r\n        <SimpleTooltip content={`Continue with ${provider.name}`} side=\"bottom\">\r\n            <Button\r\n                className={cn(\r\n                    \"text-sm gap-4 bg-zinc-900 border border-muted/75\",\r\n                    showNames ? \"px-9\" : \"px-10\"\r\n                )}\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={handleLogin}\r\n                disabled={loading}\r\n            >\r\n                <div>\r\n                    {loading ? (\r\n                        <Loader2 className=\"size-4 animate-spin\" />\r\n                    ) : (\r\n                        <Image\r\n                            src={`https://img.clerk.com/static/${provider.id}.svg?width=80`}\r\n                            alt={provider.name}\r\n                            width={16}\r\n                            height={16}\r\n                            unoptimized\r\n                        />\r\n                    )}\r\n                </div>\r\n                {showNames && provider.name}\r\n            </Button>\r\n        </SimpleTooltip>\r\n    );\r\n};\r\n\r\ntype FormInputGroupProps = {\r\n    /**\r\n     * The inputs to display in the group.\r\n     */\r\n    children: ReactElement[];\r\n\r\n    /**\r\n     * Optional className for custom styling.\r\n     */\r\n    className?: string;\r\n};\r\n\r\ntype FormInputProps = {\r\n    /**\r\n     * Optional className for custom styling.\r\n     */\r\n    className?: string;\r\n\r\n    /**\r\n     * The label of the input.\r\n     */\r\n    label: string;\r\n\r\n    /**\r\n     * The name of the input.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The optional icon of the input.\r\n     */\r\n    icon?: LucideIcon;\r\n} & ComponentProps<\"input\">;\r\n\r\nconst FormInput = ({\r\n    className,\r\n    label,\r\n    icon: Icon,\r\n    name,\r\n    ...props\r\n}: FormInputProps): ReactElement => (\r\n    <div className=\"flex flex-col gap-2.5\">\r\n        <Label htmlFor={name}>{label}</Label>\r\n        <div className=\"relative\">\r\n            {Icon && (\r\n                <Icon className=\"absolute left-2.5 top-1/2 -translate-y-1/2 size-4 text-muted-foreground\" />\r\n            )}\r\n            <Input\r\n                className={cn(Icon && \"pl-8\", className)}\r\n                name={name}\r\n                {...props}\r\n            />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport const PasswordInput = (): ReactElement => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    return (\r\n        <div className=\"relative\">\r\n            <FormInput\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                icon={Lock}\r\n                required\r\n            />\r\n            <Button\r\n                className=\"absolute right-2 top-2/3 -translate-y-1/2 mt-px text-muted-foreground hover:!bg-transparent\"\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => setShowPassword((prev) => !prev)}\r\n            >\r\n                {showPassword ? <Eye /> : <EyeClosed />}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const FormInputGroup = ({\r\n    children,\r\n    className,\r\n}: FormInputGroupProps): ReactElement => (\r\n    <div className={cn(\"grid grid-cols-2 gap-3.5\", className)}>{children}</div>\r\n);\r\n\r\ntype GenericFormViewProps = {\r\n    /**\r\n     * The text to display on the submit button.\r\n     */\r\n    submitText: string;\r\n\r\n    /**\r\n     * The function to call when the form is submitted.\r\n     */\r\n    onSubmit: (form: FormData) => Promise<void>;\r\n\r\n    /**\r\n     * The children (inputs) to display in the form.\r\n     */\r\n    children: ReactNode;\r\n};\r\n\r\nconst GenericFormView = ({\r\n    submitText,\r\n    onSubmit,\r\n    children,\r\n}: GenericFormViewProps): ReactElement => {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    return (\r\n        <form\r\n            className=\"flex flex-col gap-3.5\"\r\n            onSubmit={async (event: FormEvent<HTMLFormElement>) => {\r\n                if (loading) return;\r\n                event.preventDefault();\r\n                const formData = new FormData(event.currentTarget);\r\n\r\n                setLoading(true);\r\n                await onSubmit(formData);\r\n                setLoading(false);\r\n            }}\r\n        >\r\n            {/* Inputs */}\r\n            {children}\r\n\r\n            {/* Submit */}\r\n            <Button\r\n                className=\"group mt-1 gap-2\"\r\n                type=\"submit\"\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                disabled={loading}\r\n            >\r\n                {submitText}\r\n                {loading ? (\r\n                    <Loader2 className=\"size-4 animate-spin\" />\r\n                ) : (\r\n                    <AnimatedRightChevron />\r\n                )}\r\n            </Button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AuthForm;\r\n",
      "type": "registry:component"
    }
  ]
}